---
- name: Deploy Dev environment on AWS
  hosts: localhost
  connection: local
  gather_facts: false

 # include vars file
  vars_files:
    - group_vars/ec2dev_aws_vars.yml

  tasks:
    - name: Create security group for instances
      ec2_group:
        name: "{{ ec2_environment }}-sec-group"
        description: "New security for {{ ec2_environment }} Instances"
        region: "{{ ec2_region }}"
        vpc_id: "{{ ec2_vpc_id  }}"
        rules:
          - proto: "tcp"
            from_port: 22
            to_port: 22
            cidr_ip: "0.0.0.0/0"
        rules_egress:
          - proto: "all"
            cidr_ip: "0.0.0.0/0"
      register: secgrp

    - name: Create EC2 Instance(s)
      ec2:
        region: "{{ ec2_region }}"
        group_id: "{{ secgrp.group_id }}"
        keypair: "{{ ec2_keypair }}"
        instance_type: "{{ ec2_instance_type }}"
        image: "{{ item.ami_id }}"
        vpc_subnet_id: "{{ ec2_subnet_id  }}"
        assign_public_ip: yes
        wait: True
        wait_timeout: 600
        instance_tags:
          Name: "{{ customer }}-{{ vpc_name }}-{{ item.name }}-{{ ec2_environment }}"
          Environment: "{{ ec2_environment }}"
          Server_Role: "{{ item.role }}"
          os: "{{ item.os_type }}"
        exact_count: "{{ ec2_instance_count }}"
        count_tag:
          Server_Role: "{{ item.role }}"
          Environment: "{{ ec2_environment }}"
      with_items: "{{ instances }}"
      register: ec2

    - name: Add instances to inventory
      local_action:
        module: add_host
        name: "{{ item.public_ip }}"
        ansible_host: "{{ item.public_ip }}"
        ansible_user: "{{ ec2_login_names[ec2_instance.os] }}"
        ansible_port: "{{ ec2_ssh_port }}"
        groups:
         - "ec2"
         - "tag_type_{{ec2_instance_tags.Server_Role}}"
         - "tag_os_{{ec2_instance_tags.os}}"
         - "tag_Environment_{{ec2_instance_tags.Environment}}"
      with_items: "{{ ec2.tagged_instances }}"
      when: ec2

    - name: Add instances to inventory
      local_action:
        module: add_host
        name: "{{ item.tagged_instances[0].public_ip }}"
        ansible_host: "{{ item.tagged_instances[0].public_ip }}"
#        ansible_user: "{{ ec2_login_names[ec2_instance.os] }}"
        ansible_port: "{{ item.item.ec2_connection_port }}"
        groups:
          - "ec2"
          - "tag_type_{{ item.item.role }}"
          - "tag_os_{{ item.item.os_type }}"
#         - "tag_Environment_{{ item.item.Environment }}"
      with_items: "{{ ec2.results }}"
      when: ec2

    - name: wait for instances to be up and running
      wait_for_connection:
        timeout: 120

- name: Ensure pyhton is installed on Linux OS
  hosts: tag_os_Linux
  remote_user: fedora
  become: true
  gather_facts: false

  tasks:
    - name: Install Python
      raw: "test -e /usr/bin/python || dnf install -y python2 python2-dnf python-simplejson"
